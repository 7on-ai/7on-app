{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-profile-dropdown",
  "type": "registry:component",
  "title": "User Profile Dropdown",
  "description": "A dropdown menu for user profile actions",
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@radix-ui/react-avatar",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/user-profile-dropdown.tsx",
      "content": "'use client'\n\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n    BellRingIcon,\n    BoltIcon,\n    BookOpenIcon,\n    ChevronsUpDownIcon,\n    CircleArrowOutUpRightIcon,\n    CircleFadingArrowUpIcon,\n    CloudSunIcon,\n    CreditCardIcon,\n    GiftIcon,\n    KeyboardIcon,\n    LifeBuoyIcon,\n    LogOutIcon,\n    StarIcon,\n    UserRoundIcon,\n} from 'lucide-react'\nimport { DropdownMenuGroup } from '@radix-ui/react-dropdown-menu'\nimport { Badge } from '@/components/ui/badge'\nimport { Select, SelectContent, SelectItem } from '@/components/ui/select'\nimport { SelectTrigger } from '@radix-ui/react-select'\nimport React from 'react'\n\ntype UserProfileDropdownProps = {\n    align?: 'start' | 'end' | 'center'\n    side?: 'top' | 'right' | 'bottom' | 'left'\n}\n\ntype Item = {\n    id: string\n    subItems: {\n        label: string\n        shortcut: string\n        icon: React.ReactNode\n        url: string\n        badge?: React.ReactNode\n        external?: boolean\n    }[]\n}\n\nconst items: Item[] = [\n    {\n        id: 'general',\n        subItems: [\n            {\n                label: 'Profile',\n                shortcut: 'P',\n                icon: <UserRoundIcon />,\n                url: '#',\n            },\n            {\n                label: 'Appearance',\n                shortcut: 'A',\n                icon: <CloudSunIcon />,\n                url: '#',\n            },\n            {\n                label: 'Settings',\n                shortcut: 'S',\n                icon: <BoltIcon />,\n                url: '#',\n            },\n            {\n                label: 'Billing',\n                shortcut: 'B',\n                icon: <CreditCardIcon />,\n                url: '#',\n            },\n            {\n                label: 'Keyboard Shortcuts',\n                shortcut: 'K',\n                icon: <KeyboardIcon />,\n                url: '#',\n            },\n            {\n                label: 'Notifications',\n                shortcut: 'N',\n                icon: <BellRingIcon />,\n                url: '#',\n            },\n        ],\n    },\n    {\n        id: 'premium',\n        subItems: [\n            {\n                label: 'Upgrade to Premium',\n                shortcut: 'U',\n                icon: <StarIcon className=\"fill-yellow-500 text-yellow-500\" />,\n                badge: (\n                    <Badge className=\"ml-auto rounded-sm bg-yellow-500 px-1 font-semibold text-black\">\n                        15% off\n                    </Badge>\n                ),\n                url: '#',\n            },\n            {\n                label: 'Referral',\n                shortcut: 'R',\n                icon: <GiftIcon />,\n                url: '#',\n            },\n        ],\n    },\n    {\n        id: 'help',\n        subItems: [\n            {\n                label: 'Github',\n                shortcut: 'G',\n                icon: (\n                    <svg viewBox=\"0 0 438.549 438.549\" fill=\"currentColor\">\n                        <path\n                            fill=\"currentColor\"\n                            d=\"M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z\"\n                        ></path>\n                    </svg>\n                ),\n                url: '#',\n                external: true,\n            },\n            {\n                label: 'Documentation',\n                shortcut: 'D',\n                icon: <BookOpenIcon />,\n                url: '#',\n                external: true,\n            },\n            {\n                label: 'Support',\n                shortcut: 'S',\n                icon: <LifeBuoyIcon />,\n                url: '#',\n                external: true,\n            },\n        ],\n    },\n] as const\n\nconst dummyAccounts = [\n    {\n        id: '1',\n        name: 'ShadCN',\n        email: 'shad@example.com',\n        imageUrl: 'https://github.com/shadcn.png',\n        initials: 'CN',\n    },\n\n    {\n        id: '2',\n        name: 'Lee Robinson',\n        email: 'lee@example.com',\n        imageUrl: 'https://github.com/leerob.png',\n        initials: 'LR',\n    },\n    {\n        id: '3',\n        name: 'Ali Farooq',\n        email: 'ali@example.com',\n        imageUrl: 'https://github.com/alifarooq9.png',\n        initials: 'AF',\n    },\n]\n\nexport default function UserProfileDropdown({\n    align = 'start',\n    side = 'bottom',\n}: UserProfileDropdownProps) {\n    const [open, setOpen] = React.useState(false)\n\n    const [selectedAccount, setSelectedAccount] = React.useState(\n        dummyAccounts[0].id\n    )\n\n    const handleSelect = (value: string) => {\n        setSelectedAccount(value)\n    }\n\n    const selectedAccountData = dummyAccounts.find(\n        (account) => account.id === selectedAccount\n    )\n\n    return (\n        <DropdownMenu open={open} onOpenChange={setOpen}>\n            <DropdownMenuTrigger className=\"focus-visible:border-ring focus-visible:ring-ring/50 ring-ring/40 rounded-full p-0.5 ring-2 transition-all outline-none focus-visible:ring-[3px]\">\n                <Avatar className=\"cursor-pointer\">\n                    <AvatarImage\n                        src={selectedAccountData?.imageUrl}\n                        alt={`@${selectedAccountData?.name}`}\n                    />\n                    <AvatarFallback>\n                        {selectedAccountData?.initials}\n                    </AvatarFallback>\n                </Avatar>\n\n                <span className=\"sr-only\">Open user menu</span>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent\n                side={side}\n                align={align}\n                className=\"bg-accent w-[270px] p-0\"\n            >\n                <div className=\"bg-popover rounded-b-lg p-1 drop-shadow-md\">\n                    <div className=\"flex items-center gap-4 p-2\">\n                        <Avatar className=\"outline-ring/30 outline-2 outline-offset-2\">\n                            <AvatarImage\n                                src={selectedAccountData?.imageUrl}\n                                alt={`@${selectedAccountData?.name}`}\n                            />\n                            <AvatarFallback>\n                                {selectedAccountData?.initials}\n                            </AvatarFallback>\n                        </Avatar>\n\n                        <div className=\"flex flex-col gap-1\">\n                            <p className=\"text-sm leading-none font-semibold\">\n                                {selectedAccountData?.name}\n                            </p>\n                            <p className=\"text-muted-foreground text-xs leading-none\">\n                                {selectedAccountData?.email}\n                            </p>\n                        </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    {items.map((item, index) => (\n                        <DropdownMenuGroup key={item.id}>\n                            {item.subItems.map((subItem) => (\n                                <DropdownMenuItem key={subItem.label} asChild>\n                                    <a\n                                        href={subItem.url}\n                                        target={\n                                            subItem.external\n                                                ? '_blank'\n                                                : undefined\n                                        }\n                                    >\n                                        {subItem.icon}\n                                        <span>{subItem.label}</span>\n                                        {subItem.badge ??\n                                            (subItem.external ? (\n                                                <CircleArrowOutUpRightIcon className=\"ml-auto\" />\n                                            ) : (\n                                                <DropdownMenuShortcut>\n                                                    {subItem.shortcut}\n                                                </DropdownMenuShortcut>\n                                            ))}\n                                    </a>\n                                </DropdownMenuItem>\n                            ))}\n\n                            {index !== items.length - 1 && (\n                                <DropdownMenuSeparator />\n                            )}\n                        </DropdownMenuGroup>\n                    ))}\n                </div>\n\n                <DropdownMenuGroup className=\"bg-accent p-1\">\n                    <Select\n                        value={selectedAccount}\n                        onValueChange={handleSelect}\n                    >\n                        <DropdownMenuItem\n                            className=\"focus:bg-popover/70\"\n                            asChild\n                            onSelect={(e) => e.preventDefault()}\n                        >\n                            <SelectTrigger className=\"w-full\">\n                                <CircleFadingArrowUpIcon />\n                                <span>Switch Account</span>\n\n                                <ChevronsUpDownIcon className=\"ml-auto\" />\n                            </SelectTrigger>\n                        </DropdownMenuItem>\n\n                        <SelectContent>\n                            {dummyAccounts.map((acc) => (\n                                <SelectItem\n                                    key={acc.id}\n                                    value={acc.id}\n                                    className=\"flex items-center gap-2 px-3 py-2\"\n                                >\n                                    <Avatar className=\"outline-ring/30 h-6 w-6 outline-2 outline-offset-2\">\n                                        <AvatarImage\n                                            src={acc.imageUrl}\n                                            alt={`@${acc.name}`}\n                                        />\n                                        <AvatarFallback>\n                                            {acc.initials}\n                                        </AvatarFallback>\n                                    </Avatar>\n\n                                    <div className=\"flex flex-col gap-1\">\n                                        <p className=\"text-sm leading-none font-semibold\">\n                                            {acc.name}\n                                        </p>\n                                        <p className=\"text-muted-foreground text-xs leading-none\">\n                                            {acc.email}\n                                        </p>\n                                    </div>\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n\n                    <DropdownMenuItem className=\"focus:bg-popover/70\">\n                        <LogOutIcon />\n                        Sign out\n                    </DropdownMenuItem>\n                </DropdownMenuGroup>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/user-profile-dropdown.tsx"
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n    return (\n        <DropdownMenuPrimitive.Portal\n            data-slot=\"dropdown-menu-portal\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuTrigger({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n    return (\n        <DropdownMenuPrimitive.Trigger\n            data-slot=\"dropdown-menu-trigger\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuContent({\n    className,\n    sideOffset = 4,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n    return (\n        <DropdownMenuPrimitive.Portal>\n            <DropdownMenuPrimitive.Content\n                data-slot=\"dropdown-menu-content\"\n                sideOffset={sideOffset}\n                className={cn(\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n                    className\n                )}\n                {...props}\n            />\n        </DropdownMenuPrimitive.Portal>\n    )\n}\n\nfunction DropdownMenuGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n    return (\n        <DropdownMenuPrimitive.Group\n            data-slot=\"dropdown-menu-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuItem({\n    className,\n    inset,\n    variant = 'default',\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n    variant?: 'default' | 'destructive'\n}) {\n    return (\n        <DropdownMenuPrimitive.Item\n            data-slot=\"dropdown-menu-item\"\n            data-inset={inset}\n            data-variant={variant}\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuCheckboxItem({\n    className,\n    children,\n    checked,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n    return (\n        <DropdownMenuPrimitive.CheckboxItem\n            data-slot=\"dropdown-menu-checkbox-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            checked={checked}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CheckIcon className=\"size-4\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.CheckboxItem>\n    )\n}\n\nfunction DropdownMenuRadioGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n    return (\n        <DropdownMenuPrimitive.RadioGroup\n            data-slot=\"dropdown-menu-radio-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuRadioItem({\n    className,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n    return (\n        <DropdownMenuPrimitive.RadioItem\n            data-slot=\"dropdown-menu-radio-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CircleIcon className=\"size-2 fill-current\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.RadioItem>\n    )\n}\n\nfunction DropdownMenuLabel({\n    className,\n    inset,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.Label\n            data-slot=\"dropdown-menu-label\"\n            data-inset={inset}\n            className={cn(\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSeparator({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n    return (\n        <DropdownMenuPrimitive.Separator\n            data-slot=\"dropdown-menu-separator\"\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuShortcut({\n    className,\n    ...props\n}: React.ComponentProps<'span'>) {\n    return (\n        <span\n            data-slot=\"dropdown-menu-shortcut\"\n            className={cn(\n                'text-muted-foreground border-border ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs leading-none font-medium tracking-widest',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSub({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n    return (\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n    )\n}\n\nfunction DropdownMenuSubTrigger({\n    className,\n    inset,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.SubTrigger\n            data-slot=\"dropdown-menu-sub-trigger\"\n            data-inset={inset}\n            className={cn(\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        >\n            {children}\n            <ChevronRightIcon className=\"ml-auto size-4\" />\n        </DropdownMenuPrimitive.SubTrigger>\n    )\n}\n\nfunction DropdownMenuSubContent({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n    return (\n        <DropdownMenuPrimitive.SubContent\n            data-slot=\"dropdown-menu-sub-content\"\n            className={cn(\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport {\n    DropdownMenu,\n    DropdownMenuPortal,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuLabel,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/badge.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n    'inline-flex items-center justify-center rounded-md border px-1.5 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n    {\n        variants: {\n            variant: {\n                default:\n                    'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n                secondary:\n                    'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n                destructive:\n                    'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n                outline:\n                    'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n        },\n    }\n)\n\nfunction Badge({\n    className,\n    variant,\n    asChild = false,\n    ...props\n}: React.ComponentProps<'span'> &\n    VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n    const Comp = asChild ? Slot : 'span'\n\n    return (\n        <Comp\n            data-slot=\"badge\"\n            className={cn(badgeVariants({ variant }), className)}\n            {...props}\n        />\n    )\n}\n\nexport { Badge, badgeVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/select.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n    return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n    return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n    className,\n    size = 'default',\n    children,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n    size?: 'sm' | 'default'\n}) {\n    return (\n        <SelectPrimitive.Trigger\n            data-slot=\"select-trigger\"\n            data-size={size}\n            className={cn(\n                \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        >\n            {children}\n            <SelectPrimitive.Icon asChild>\n                <ChevronDownIcon className=\"size-4 opacity-50\" />\n            </SelectPrimitive.Icon>\n        </SelectPrimitive.Trigger>\n    )\n}\n\nfunction SelectContent({\n    className,\n    children,\n    position = 'popper',\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n    return (\n        <SelectPrimitive.Portal>\n            <SelectPrimitive.Content\n                data-slot=\"select-content\"\n                className={cn(\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n                    position === 'popper' &&\n                        'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n                    className\n                )}\n                position={position}\n                {...props}\n            >\n                <SelectScrollUpButton />\n                <SelectPrimitive.Viewport\n                    className={cn(\n                        'p-1',\n                        position === 'popper' &&\n                            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'\n                    )}\n                >\n                    {children}\n                </SelectPrimitive.Viewport>\n                <SelectScrollDownButton />\n            </SelectPrimitive.Content>\n        </SelectPrimitive.Portal>\n    )\n}\n\nfunction SelectLabel({\n    className,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n    return (\n        <SelectPrimitive.Label\n            data-slot=\"select-label\"\n            className={cn(\n                'text-muted-foreground px-2 py-1.5 text-xs',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction SelectItem({\n    className,\n    children,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n    return (\n        <SelectPrimitive.Item\n            data-slot=\"select-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n                className\n            )}\n            {...props}\n        >\n            <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n                <SelectPrimitive.ItemIndicator>\n                    <CheckIcon className=\"size-4\" />\n                </SelectPrimitive.ItemIndicator>\n            </span>\n            <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n        </SelectPrimitive.Item>\n    )\n}\n\nfunction SelectSeparator({\n    className,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n    return (\n        <SelectPrimitive.Separator\n            data-slot=\"select-separator\"\n            className={cn(\n                'bg-border pointer-events-none -mx-1 my-1 h-px',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction SelectScrollUpButton({\n    className,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n    return (\n        <SelectPrimitive.ScrollUpButton\n            data-slot=\"select-scroll-up-button\"\n            className={cn(\n                'flex cursor-default items-center justify-center py-1',\n                className\n            )}\n            {...props}\n        >\n            <ChevronUpIcon className=\"size-4\" />\n        </SelectPrimitive.ScrollUpButton>\n    )\n}\n\nfunction SelectScrollDownButton({\n    className,\n    ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n    return (\n        <SelectPrimitive.ScrollDownButton\n            data-slot=\"select-scroll-down-button\"\n            className={cn(\n                'flex cursor-default items-center justify-center py-1',\n                className\n            )}\n            {...props}\n        >\n            <ChevronDownIcon className=\"size-4\" />\n        </SelectPrimitive.ScrollDownButton>\n    )\n}\n\nexport {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectLabel,\n    SelectScrollDownButton,\n    SelectScrollUpButton,\n    SelectSeparator,\n    SelectTrigger,\n    SelectValue,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}