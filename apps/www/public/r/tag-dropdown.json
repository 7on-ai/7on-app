{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-dropdown",
  "type": "registry:component",
  "title": "Tag Dropdown",
  "description": "A dropdown menu for tags",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@radix-ui/react-label",
    "react-hook-form",
    "zod",
    "@hookform/resolvers"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/tag-dropdown.tsx",
      "content": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Input } from '@/components/ui/input'\nimport { cn } from '@/lib/utils'\nimport { ChevronDownIcon, PlusIcon } from 'lucide-react'\nimport {\n    Form,\n    FormControl,\n    FormDescription,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from '@/components/ui/form'\nimport React from 'react'\nimport { z } from 'zod'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\n\nconst defaultTags = [\n    {\n        id: 'frontend',\n        label: 'Frontend',\n    },\n    {\n        id: 'backend',\n        label: 'Backend',\n    },\n    {\n        id: 'design',\n        label: 'Design',\n    },\n    {\n        id: 'devops',\n        label: 'DevOps',\n    },\n    {\n        id: 'qa',\n        label: 'QA',\n    },\n    {\n        id: 'operations',\n        label: 'Operations',\n    },\n]\n\ntype TagDropdownProps = {\n    side: 'left' | 'right' | 'top' | 'bottom'\n    align: 'start' | 'center' | 'end'\n}\n\nconst formSchema = z.object({\n    tag: z.string().min(1, {\n        message: 'Tag is required',\n    }),\n})\n\nexport default function TagDropdown({\n    side = 'bottom',\n    align = 'start',\n}: TagDropdownProps) {\n    const [tags, setTags] = React.useState([...defaultTags])\n    const [selectedTag, setSelectedTag] = React.useState<string>('')\n    const [isInputFocused, setIsInputFocused] = React.useState(false)\n\n    const handleOnSelect = (tag: { id: string; label: string }) => {\n        if (selectedTag === tag.id) {\n            return setSelectedTag('')\n        }\n\n        setSelectedTag(tag.id)\n    }\n\n    // Handle keyboard events when input is focused\n    const handleInputKeyDown = (e: React.KeyboardEvent) => {\n        if (isInputFocused) {\n            // Stop event propagation to prevent dropdown keyboard navigation\n            e.stopPropagation()\n        }\n    }\n\n    const form = useForm<z.infer<typeof formSchema>>({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            tag: '',\n        },\n    })\n\n    const onSubmit = (data: z.infer<typeof formSchema>) => {\n        if (!data.tag) return\n        if (tags.find((tag) => tag.id === data.tag.toLowerCase())) {\n            return form.setValue('tag', '')\n        }\n\n        setTags([\n            ...tags,\n            {\n                id: data.tag.toLowerCase(),\n                label: data.tag,\n            },\n        ])\n        form.reset()\n    }\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                    {selectedTag ? (\n                        <span>\n                            {tags.find((tag) => tag.id === selectedTag)?.label}\n                        </span>\n                    ) : (\n                        <span>Assign Tag</span>\n                    )}\n                    <ChevronDownIcon />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent\n                align={align}\n                side={side}\n                className=\"w-[200px]\"\n                onKeyDown={(e) => {\n                    // Prevent dropdown keyboard navigation when input is focused\n                    if (isInputFocused) {\n                        e.stopPropagation()\n                    }\n                }}\n            >\n                <DropdownMenuLabel>Assign team</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <div className=\"flex max-h-[200px] flex-wrap gap-1 overflow-y-auto\">\n                    {tags.map((tag) => (\n                        <DropdownMenuItem\n                            key={tag.id}\n                            onSelect={() => handleOnSelect(tag)}\n                            className={cn(\n                                'bg-accent focus:bg-accent/50 cursor-pointer py-1'\n                            )}\n                        >\n                            {tag.label}\n                        </DropdownMenuItem>\n                    ))}\n                </div>\n                <DropdownMenuSeparator />\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(onSubmit)}\n                        className=\"flex justify-end gap-1 p-1\"\n                    >\n                        <FormField\n                            control={form.control}\n                            name=\"tag\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormControl>\n                                        <Input\n                                            placeholder=\"New Team\"\n                                            autoFocus\n                                            className=\"h-8\"\n                                            onFocus={() =>\n                                                setIsInputFocused(true)\n                                            }\n                                            onKeyDown={handleInputKeyDown}\n                                            {...field}\n                                            onBlur={() => {\n                                                setIsInputFocused(false)\n                                                field.onBlur()\n                                            }}\n                                        />\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                        >\n                            <PlusIcon />\n                        </Button>\n                    </form>\n                </Form>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/tag-dropdown.tsx"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n    {\n        variants: {\n            variant: {\n                default:\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n                destructive:\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n                outline:\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n                secondary:\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n                ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n                link: 'text-primary underline-offset-4 hover:underline',\n            },\n            size: {\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n                icon: 'size-9',\n                iconSm: 'size-8',\n                iconXsm: 'size-5',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n            size: 'default',\n        },\n    }\n)\n\nfunction Button({\n    className,\n    variant,\n    size,\n    asChild = false,\n    ...props\n}: React.ComponentProps<'button'> &\n    VariantProps<typeof buttonVariants> & {\n        asChild?: boolean\n    }) {\n    const Comp = asChild ? Slot : 'button'\n\n    return (\n        <Comp\n            data-slot=\"button\"\n            className={cn(buttonVariants({ variant, size, className }))}\n            {...props}\n        />\n    )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n    return (\n        <DropdownMenuPrimitive.Portal\n            data-slot=\"dropdown-menu-portal\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuTrigger({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n    return (\n        <DropdownMenuPrimitive.Trigger\n            data-slot=\"dropdown-menu-trigger\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuContent({\n    className,\n    sideOffset = 4,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n    return (\n        <DropdownMenuPrimitive.Portal>\n            <DropdownMenuPrimitive.Content\n                data-slot=\"dropdown-menu-content\"\n                sideOffset={sideOffset}\n                className={cn(\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n                    className\n                )}\n                {...props}\n            />\n        </DropdownMenuPrimitive.Portal>\n    )\n}\n\nfunction DropdownMenuGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n    return (\n        <DropdownMenuPrimitive.Group\n            data-slot=\"dropdown-menu-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuItem({\n    className,\n    inset,\n    variant = 'default',\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n    variant?: 'default' | 'destructive'\n}) {\n    return (\n        <DropdownMenuPrimitive.Item\n            data-slot=\"dropdown-menu-item\"\n            data-inset={inset}\n            data-variant={variant}\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuCheckboxItem({\n    className,\n    children,\n    checked,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n    return (\n        <DropdownMenuPrimitive.CheckboxItem\n            data-slot=\"dropdown-menu-checkbox-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            checked={checked}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CheckIcon className=\"size-4\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.CheckboxItem>\n    )\n}\n\nfunction DropdownMenuRadioGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n    return (\n        <DropdownMenuPrimitive.RadioGroup\n            data-slot=\"dropdown-menu-radio-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuRadioItem({\n    className,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n    return (\n        <DropdownMenuPrimitive.RadioItem\n            data-slot=\"dropdown-menu-radio-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CircleIcon className=\"size-2 fill-current\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.RadioItem>\n    )\n}\n\nfunction DropdownMenuLabel({\n    className,\n    inset,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.Label\n            data-slot=\"dropdown-menu-label\"\n            data-inset={inset}\n            className={cn(\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSeparator({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n    return (\n        <DropdownMenuPrimitive.Separator\n            data-slot=\"dropdown-menu-separator\"\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuShortcut({\n    className,\n    ...props\n}: React.ComponentProps<'span'>) {\n    return (\n        <span\n            data-slot=\"dropdown-menu-shortcut\"\n            className={cn(\n                'text-muted-foreground border-border tex ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs font-medium tracking-widest',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSub({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n    return (\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n    )\n}\n\nfunction DropdownMenuSubTrigger({\n    className,\n    inset,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.SubTrigger\n            data-slot=\"dropdown-menu-sub-trigger\"\n            data-inset={inset}\n            className={cn(\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        >\n            {children}\n            <ChevronRightIcon className=\"ml-auto size-4\" />\n        </DropdownMenuPrimitive.SubTrigger>\n    )\n}\n\nfunction DropdownMenuSubContent({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n    return (\n        <DropdownMenuPrimitive.SubContent\n            data-slot=\"dropdown-menu-sub-content\"\n            className={cn(\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport {\n    DropdownMenu,\n    DropdownMenuPortal,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuLabel,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/input.tsx",
      "content": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n    return (\n        <input\n            type={type}\n            data-slot=\"input\"\n            className={cn(\n                'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n                'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n                'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/form.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n    Controller,\n    FormProvider,\n    useFormContext,\n    useFormState,\n    type ControllerProps,\n    type FieldPath,\n    type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n    name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n    {} as FormFieldContextValue\n)\n\nconst FormField = <\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n    ...props\n}: ControllerProps<TFieldValues, TName>) => {\n    return (\n        <FormFieldContext.Provider value={{ name: props.name }}>\n            <Controller {...props} />\n        </FormFieldContext.Provider>\n    )\n}\n\nconst useFormField = () => {\n    const fieldContext = React.useContext(FormFieldContext)\n    const itemContext = React.useContext(FormItemContext)\n    const { getFieldState } = useFormContext()\n    const formState = useFormState({ name: fieldContext.name })\n    const fieldState = getFieldState(fieldContext.name, formState)\n\n    if (!fieldContext) {\n        throw new Error('useFormField should be used within <FormField>')\n    }\n\n    const { id } = itemContext\n\n    return {\n        id,\n        name: fieldContext.name,\n        formItemId: `${id}-form-item`,\n        formDescriptionId: `${id}-form-item-description`,\n        formMessageId: `${id}-form-item-message`,\n        ...fieldState,\n    }\n}\n\ntype FormItemContextValue = {\n    id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n    {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n    const id = React.useId()\n\n    return (\n        <FormItemContext.Provider value={{ id }}>\n            <div\n                data-slot=\"form-item\"\n                className={cn('grid gap-2', className)}\n                {...props}\n            />\n        </FormItemContext.Provider>\n    )\n}\n\nfunction FormLabel({\n    className,\n    ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n    const { error, formItemId } = useFormField()\n\n    return (\n        <Label\n            data-slot=\"form-label\"\n            data-error={!!error}\n            className={cn('data-[error=true]:text-destructive', className)}\n            htmlFor={formItemId}\n            {...props}\n        />\n    )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n    const { error, formItemId, formDescriptionId, formMessageId } =\n        useFormField()\n\n    return (\n        <Slot\n            data-slot=\"form-control\"\n            id={formItemId}\n            aria-describedby={\n                !error\n                    ? `${formDescriptionId}`\n                    : `${formDescriptionId} ${formMessageId}`\n            }\n            aria-invalid={!!error}\n            {...props}\n        />\n    )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n    const { formDescriptionId } = useFormField()\n\n    return (\n        <p\n            data-slot=\"form-description\"\n            id={formDescriptionId}\n            className={cn('text-muted-foreground text-sm', className)}\n            {...props}\n        />\n    )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n    const { error, formMessageId } = useFormField()\n    const body = error ? String(error?.message ?? '') : props.children\n\n    if (!body) {\n        return null\n    }\n\n    return (\n        <p\n            data-slot=\"form-message\"\n            id={formMessageId}\n            className={cn('text-destructive text-sm', className)}\n            {...props}\n        >\n            {body}\n        </p>\n    )\n}\n\nexport {\n    useFormField,\n    Form,\n    FormItem,\n    FormLabel,\n    FormControl,\n    FormDescription,\n    FormMessage,\n    FormField,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}