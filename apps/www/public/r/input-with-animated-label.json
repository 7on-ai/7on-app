{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-with-animated-label",
  "type": "registry:component",
  "title": "Input with Animated Label",
  "description": "A component for inputting text with an animated label",
  "dependencies": [
    "zod",
    "react-hook-form",
    "clsx",
    "tailwind-merge",
    "zod",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "react-hook-form",
    "@hookform/resolvers"
  ],
  "files": [
    {
      "path": "src/registry/default/components/input/input-with-animated-label.tsx",
      "content": "'use client'\n\nimport { Input } from '@/components/ui/input'\nimport { z } from 'zod'\nimport {\n    Form,\n    FormControl,\n    FormDescription,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from '@/components/ui/form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport Link from 'next/link'\n\nconst formSchema = z.object({\n    input: z.string().min(1, {\n        message: 'Input is required',\n    }),\n})\n\nexport default function InputWithAnimatedLabel() {\n    const form = useForm<z.infer<typeof formSchema>>({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            input: '',\n        },\n    })\n\n    function onSubmit(data: z.infer<typeof formSchema>) {\n        console.log('Form submitted:', data)\n        // Handle form submission logic here\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"w-full max-w-4/5 space-y-6\"\n            >\n                <FormField\n                    control={form.control}\n                    name=\"input\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <div className=\"group relative\">\n                                <FormLabel className=\"text-muted-foreground group-focus-within:text-foreground bg-background has-[+input:not(:placeholder-shown)]:text-foreground absolute top-1/2 left-2 origin-center -translate-y-1/2 cursor-text px-1 transition-all group-focus-within:top-0 group-focus-within:text-xs group-focus-within:font-medium has-[+input:not(:placeholder-shown)]:pointer-events-none has-[+input:not(:placeholder-shown)]:top-0 has-[+input:not(:placeholder-shown)]:text-xs has-[+input:not(:placeholder-shown)]:font-medium\">\n                                    Label with Animation\n                                </FormLabel>\n                                <FormControl>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"dark:bg-background\"\n                                        placeholder=\"\"\n                                        {...field}\n                                    />\n                                </FormControl>\n                            </div>\n                            <FormDescription>\n                                Built with{' '}\n                                <Link\n                                    target=\"_blank\"\n                                    href=\"https://react-hook-form.com/\"\n                                    className=\"underline underline-offset-2\"\n                                >\n                                    react-hook-form\n                                </Link>\n                            </FormDescription>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/input-with-animated-label.tsx"
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n    return (\n        <input\n            type={type}\n            data-slot=\"input\"\n            className={cn(\n                'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n                'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n                'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/components/ui/form.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n    Controller,\n    FormProvider,\n    useFormContext,\n    useFormState,\n    type ControllerProps,\n    type FieldPath,\n    type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n    name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n    {} as FormFieldContextValue\n)\n\nconst FormField = <\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n    ...props\n}: ControllerProps<TFieldValues, TName>) => {\n    return (\n        <FormFieldContext.Provider value={{ name: props.name }}>\n            <Controller {...props} />\n        </FormFieldContext.Provider>\n    )\n}\n\nconst useFormField = () => {\n    const fieldContext = React.useContext(FormFieldContext)\n    const itemContext = React.useContext(FormItemContext)\n    const { getFieldState } = useFormContext()\n    const formState = useFormState({ name: fieldContext.name })\n    const fieldState = getFieldState(fieldContext.name, formState)\n\n    if (!fieldContext) {\n        throw new Error('useFormField should be used within <FormField>')\n    }\n\n    const { id } = itemContext\n\n    return {\n        id,\n        name: fieldContext.name,\n        formItemId: `${id}-form-item`,\n        formDescriptionId: `${id}-form-item-description`,\n        formMessageId: `${id}-form-item-message`,\n        ...fieldState,\n    }\n}\n\ntype FormItemContextValue = {\n    id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n    {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n    const id = React.useId()\n\n    return (\n        <FormItemContext.Provider value={{ id }}>\n            <div\n                data-slot=\"form-item\"\n                className={cn('grid gap-2', className)}\n                {...props}\n            />\n        </FormItemContext.Provider>\n    )\n}\n\nfunction FormLabel({\n    className,\n    ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n    const { error, formItemId } = useFormField()\n\n    return (\n        <Label\n            data-slot=\"form-label\"\n            data-error={!!error}\n            className={cn('data-[error=true]:text-destructive', className)}\n            htmlFor={formItemId}\n            {...props}\n        />\n    )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n    const { error, formItemId, formDescriptionId, formMessageId } =\n        useFormField()\n\n    return (\n        <Slot\n            data-slot=\"form-control\"\n            id={formItemId}\n            aria-describedby={\n                !error\n                    ? `${formDescriptionId}`\n                    : `${formDescriptionId} ${formMessageId}`\n            }\n            aria-invalid={!!error}\n            {...props}\n        />\n    )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n    const { formDescriptionId } = useFormField()\n\n    return (\n        <p\n            data-slot=\"form-description\"\n            id={formDescriptionId}\n            className={cn('text-muted-foreground text-sm', className)}\n            {...props}\n        />\n    )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n    const { error, formMessageId } = useFormField()\n    const body = error ? String(error?.message ?? '') : props.children\n\n    if (!body) {\n        return null\n    }\n\n    return (\n        <p\n            data-slot=\"form-message\"\n            id={formMessageId}\n            className={cn('text-destructive text-sm', className)}\n            {...props}\n        >\n            {body}\n        </p>\n    )\n}\n\nexport {\n    useFormField,\n    Form,\n    FormItem,\n    FormLabel,\n    FormControl,\n    FormDescription,\n    FormMessage,\n    FormField,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}