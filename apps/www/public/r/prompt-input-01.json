{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prompt-input-01",
  "type": "registry:component",
  "title": "Prompt Input 01",
  "description": "A first component for inputting ai prompts",
  "dependencies": [
    "react-textarea-autosize",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-tooltip",
    "react-textarea-autosize",
    "@radix-ui/react-toggle"
  ],
  "files": [
    {
      "path": "registry/default/components/input/prompt-input-01.tsx",
      "content": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport {\n    ArrowUpIcon,\n    CloudUploadIcon,\n    GlobeIcon,\n    LightbulbIcon,\n    MicIcon,\n    PaperclipIcon,\n} from 'lucide-react'\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n    Tooltip,\n    TooltipContent,\n    TooltipProvider,\n    TooltipTrigger,\n} from '@/components/ui/tooltip'\nimport React from 'react'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport { Toggle } from '@/components/ui/toggle'\n\nexport default function PromptInput01() {\n    const [message, setMessage] = React.useState<string>('')\n    const [searchToggle, setSearchToggle] = React.useState<boolean>(false)\n    const [reasonToggle, setReasonToggle] = React.useState<boolean>(false)\n\n    const handleSubmit = () => {\n        if (message.trim() === '') return\n        // Handle message submission logic here\n        console.log('Message submitted:', message)\n        console.log(\n            'Search toggle state:',\n            searchToggle ? 'Enabled' : 'Disabled'\n        )\n        console.log(\n            'Reason toggle state:',\n            reasonToggle ? 'Enabled' : 'Disabled'\n        )\n        setMessage('')\n    }\n\n    return (\n        <div\n            className={cn(\n                'placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input rounded-md border bg-transparent text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm',\n                'focus-within:border-ring focus-within:ring-ring/50 focus-within:ring-[3px]',\n                'has-aria-invalid:ring-destructive/20 dark:has-aria-invalid:ring-destructive/40 has-aria-invalid:border-destructive group p-4',\n                'flex w-full flex-col gap-6'\n            )}\n        >\n            <TextareaAutosize\n                className=\"min-h-9 w-full resize-none border-none bg-transparent text-base focus-visible:outline-none\"\n                placeholder=\"Ask anything...\"\n                minRows={1}\n                rows={1}\n                maxRows={6}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n            />\n\n            <div className=\"flex items-center justify-between\">\n                <TooltipProvider delayDuration={0}>\n                    <div className=\"flex items-center gap-2\">\n                        <Attachments />\n\n                        <Tooltip>\n                            <Toggle\n                                value=\"search\"\n                                variant=\"outline\"\n                                asChild\n                                pressed={searchToggle}\n                                onPressedChange={setSearchToggle}\n                                className=\"cursor-pointer\"\n                            >\n                                <TooltipTrigger>\n                                    <GlobeIcon />\n                                    <span className=\"hidden sm:block\">\n                                        Search\n                                    </span>\n                                </TooltipTrigger>\n                            </Toggle>\n                            <TooltipContent>\n                                <p>Search the web</p>\n                            </TooltipContent>\n                        </Tooltip>\n\n                        <Tooltip>\n                            <Toggle\n                                value=\"reason\"\n                                variant=\"outline\"\n                                asChild\n                                pressed={reasonToggle}\n                                onPressedChange={setReasonToggle}\n                                className=\"cursor-pointer\"\n                            >\n                                <TooltipTrigger>\n                                    <LightbulbIcon />\n                                    <span className=\"hidden sm:block\">\n                                        Reason\n                                    </span>\n                                </TooltipTrigger>\n                            </Toggle>\n                            <TooltipContent>\n                                <p>Think before responding</p>\n                            </TooltipContent>\n                        </Tooltip>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <Button\n                                    type=\"button\"\n                                    size=\"icon\"\n                                    className=\"cursor-pointer\"\n                                    variant=\"outline\"\n                                >\n                                    <MicIcon />\n                                </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                                <p>Dictate</p>\n                            </TooltipContent>\n                        </Tooltip>\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <Button\n                                    type=\"submit\"\n                                    size=\"icon\"\n                                    className=\"cursor-pointer\"\n                                    disabled={!message || message.length === 0}\n                                    onClick={() => handleSubmit()}\n                                >\n                                    <ArrowUpIcon />\n                                </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                                <p>Send</p>\n                            </TooltipContent>\n                        </Tooltip>\n                    </div>\n                </TooltipProvider>\n            </div>\n        </div>\n    )\n}\n\nfunction Attachments() {\n    return (\n        <DropdownMenu>\n            <Tooltip>\n                <TooltipTrigger asChild>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"cursor-pointer\"\n                        >\n                            <PaperclipIcon />\n                            <span className=\"sr-only\">Attachments</span>\n                        </Button>\n                    </DropdownMenuTrigger>\n                </TooltipTrigger>\n\n                <TooltipContent>\n                    <p>Add photos and files</p>\n                </TooltipContent>\n            </Tooltip>\n\n            <DropdownMenuContent align=\"start\" side=\"top\">\n                <DropdownMenuItem className=\"cursor-pointer\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 87.3 78\"\n                    >\n                        <path\n                            fill=\"#0066da\"\n                            d=\"m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3L27.5 53H0c0 1.55.4 3.1 1.2 4.5z\"\n                        />\n                        <path\n                            fill=\"#00ac47\"\n                            d=\"M43.65 25 29.9 1.2c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44A9.06 9.06 0 0 0 0 53h27.5z\"\n                        />\n                        <path\n                            fill=\"#ea4335\"\n                            d=\"M73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75L86.1 57.5c.8-1.4 1.2-2.95 1.2-4.5H59.798l5.852 11.5z\"\n                        />\n                        <path\n                            fill=\"#00832d\"\n                            d=\"M43.65 25 57.4 1.2C56.05.4 54.5 0 52.9 0H34.4c-1.6 0-3.15.45-4.5 1.2z\"\n                        />\n                        <path\n                            fill=\"#2684fc\"\n                            d=\"M59.8 53H27.5L13.75 76.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z\"\n                        />\n                        <path\n                            fill=\"#ffba00\"\n                            d=\"m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3L43.65 25 59.8 53h27.45c0-1.55-.4-3.1-1.2-4.5z\"\n                        />\n                    </svg>\n                    Connect to Google Drive\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"cursor-pointer\">\n                    <CloudUploadIcon /> Add photos and files\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/prompt-input-01.tsx"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n    {\n        variants: {\n            variant: {\n                default:\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n                destructive:\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n                outline:\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n                secondary:\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n                ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n                link: 'text-primary underline-offset-4 hover:underline',\n            },\n            size: {\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n                icon: 'size-9',\n                iconSm: 'size-8',\n                iconXsm: 'size-5',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n            size: 'default',\n        },\n    }\n)\n\nfunction Button({\n    className,\n    variant,\n    size,\n    asChild = false,\n    ...props\n}: React.ComponentProps<'button'> &\n    VariantProps<typeof buttonVariants> & {\n        asChild?: boolean\n    }) {\n    const Comp = asChild ? Slot : 'button'\n\n    return (\n        <Comp\n            data-slot=\"button\"\n            className={cn(buttonVariants({ variant, size, className }))}\n            {...props}\n        />\n    )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n    return (\n        <DropdownMenuPrimitive.Portal\n            data-slot=\"dropdown-menu-portal\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuTrigger({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n    return (\n        <DropdownMenuPrimitive.Trigger\n            data-slot=\"dropdown-menu-trigger\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuContent({\n    className,\n    sideOffset = 4,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n    return (\n        <DropdownMenuPrimitive.Portal>\n            <DropdownMenuPrimitive.Content\n                data-slot=\"dropdown-menu-content\"\n                sideOffset={sideOffset}\n                className={cn(\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n                    className\n                )}\n                {...props}\n            />\n        </DropdownMenuPrimitive.Portal>\n    )\n}\n\nfunction DropdownMenuGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n    return (\n        <DropdownMenuPrimitive.Group\n            data-slot=\"dropdown-menu-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuItem({\n    className,\n    inset,\n    variant = 'default',\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n    variant?: 'default' | 'destructive'\n}) {\n    return (\n        <DropdownMenuPrimitive.Item\n            data-slot=\"dropdown-menu-item\"\n            data-inset={inset}\n            data-variant={variant}\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuCheckboxItem({\n    className,\n    children,\n    checked,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n    return (\n        <DropdownMenuPrimitive.CheckboxItem\n            data-slot=\"dropdown-menu-checkbox-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            checked={checked}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CheckIcon className=\"size-4\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.CheckboxItem>\n    )\n}\n\nfunction DropdownMenuRadioGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n    return (\n        <DropdownMenuPrimitive.RadioGroup\n            data-slot=\"dropdown-menu-radio-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuRadioItem({\n    className,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n    return (\n        <DropdownMenuPrimitive.RadioItem\n            data-slot=\"dropdown-menu-radio-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CircleIcon className=\"size-2 fill-current\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.RadioItem>\n    )\n}\n\nfunction DropdownMenuLabel({\n    className,\n    inset,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.Label\n            data-slot=\"dropdown-menu-label\"\n            data-inset={inset}\n            className={cn(\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSeparator({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n    return (\n        <DropdownMenuPrimitive.Separator\n            data-slot=\"dropdown-menu-separator\"\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuShortcut({\n    className,\n    ...props\n}: React.ComponentProps<'span'>) {\n    return (\n        <span\n            data-slot=\"dropdown-menu-shortcut\"\n            className={cn(\n                'text-muted-foreground ml-auto text-xs tracking-widest',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSub({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n    return (\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n    )\n}\n\nfunction DropdownMenuSubTrigger({\n    className,\n    inset,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.SubTrigger\n            data-slot=\"dropdown-menu-sub-trigger\"\n            data-inset={inset}\n            className={cn(\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        >\n            {children}\n            <ChevronRightIcon className=\"ml-auto size-4\" />\n        </DropdownMenuPrimitive.SubTrigger>\n    )\n}\n\nfunction DropdownMenuSubContent({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n    return (\n        <DropdownMenuPrimitive.SubContent\n            data-slot=\"dropdown-menu-sub-content\"\n            className={cn(\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport {\n    DropdownMenu,\n    DropdownMenuPortal,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuLabel,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/tooltip.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n    delayDuration = 0,\n    ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n    return (\n        <TooltipPrimitive.Provider\n            data-slot=\"tooltip-provider\"\n            delayDuration={delayDuration}\n            {...props}\n        />\n    )\n}\n\nfunction Tooltip({\n    ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n    return (\n        <TooltipProvider>\n            <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n        </TooltipProvider>\n    )\n}\n\nfunction TooltipTrigger({\n    ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n    return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n    className,\n    sideOffset = 0,\n    children,\n    showArrow = false,\n    ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\n    showArrow?: boolean\n}) {\n    return (\n        <TooltipPrimitive.Portal>\n            <TooltipPrimitive.Content\n                data-slot=\"tooltip-content\"\n                sideOffset={sideOffset}\n                className={cn(\n                    'bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n                    !showArrow && 'border-grid -translate-y-2 border',\n                    className\n                )}\n                {...props}\n            >\n                {children}\n                {showArrow && (\n                    <TooltipPrimitive.Arrow className=\"bg-popover fill-popover z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n                )}\n            </TooltipPrimitive.Content>\n        </TooltipPrimitive.Portal>\n    )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/toggle.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}