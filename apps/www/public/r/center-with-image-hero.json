{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "center-with-image-hero",
  "type": "registry:block",
  "title": "Center with image hero",
  "description": "A centered layout with an image and content",
  "dependencies": [
    "next-themes",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "utils",
    "https://launchmvpfast.com/r/fonts.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/hero-sections/center-with-image-hero.tsx",
      "content": "import { Particles } from '@/components/ui/particles'\nimport { rainbowButtonVariants } from '@/components/ui/rainbow-button'\nimport { cn } from '@/lib/utils'\nimport { ArrowRightIcon } from 'lucide-react'\nimport * as m from 'motion/react-m'\nimport { LazyMotion, domAnimation } from 'motion/react'\n\nexport default function Hero() {\n    return (\n        <LazyMotion features={domAnimation}>\n            <section className=\"relative container mx-auto flex w-full flex-col items-center p-4 py-28 xl:px-6\">\n                <div className=\"flex w-full max-w-3xl flex-col items-center gap-4\">\n                    <m.a\n                        animate={{ transform: 'translateY(0)', opacity: 1 }}\n                        initial={{ transform: 'translateY(-20px)', opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0,\n                            ease: 'easeOut',\n                        }}\n                        href=\"#\"\n                        className=\"border-border bg-muted/50 flex w-fit items-center justify-center gap-1 rounded-md border px-3 py-2 text-sm font-semibold transition-[gap] ease-out hover:gap-3\"\n                    >\n                        <span className=\"flex items-center gap-2\">\n                            <span>ðŸŽ‰</span>\n                            <span className=\"hidden sm:block\">\n                                New Feature Alert:\n                            </span>\n                            Beta Access Now Open!\n                        </span>\n                        <ArrowRightIcon className=\"size-4\" />\n                    </m.a>\n                    <m.h1\n                        animate={{ transform: 'translateY(0)', opacity: 1 }}\n                        initial={{ transform: 'translateY(-20px)', opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0.1,\n                            ease: 'easeOut',\n                        }}\n                        className=\"font-heading from-foreground bg-gradient-to-b to-neutral-800/70 bg-clip-text text-center text-4xl leading-none font-semibold text-balance whitespace-pre-wrap text-transparent sm:text-5xl lg:text-7xl xl:leading-[5rem] dark:to-neutral-400/80\"\n                    >\n                        Re-usable Page Blocks and Sections\n                    </m.h1>\n                    <m.p\n                        animate={{ transform: 'translateY(0)', opacity: 1 }}\n                        initial={{ transform: 'translateY(-20px)', opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0.2,\n                            ease: 'easeOut',\n                        }}\n                        className=\"text-muted-foreground text-center text-base text-balance sm:text-lg\"\n                    >\n                        Modular, responsive hero sections built with{' '}\n                        <a\n                            href=\"https://ui.shadcn.com\"\n                            className=\"underline underline-offset-4\"\n                        >\n                            shadcn/ui\n                        </a>{' '}\n                        and{' '}\n                        <a\n                            href=\"https://tailwindcss.com/\"\n                            className=\"underline underline-offset-4\"\n                        >\n                            Tailwind CSS\n                        </a>{' '}\n                        â€” featuring the{' '}\n                        <a\n                            href=\"https://magicui.design/docs/components/rainbow-button\"\n                            className=\"underline underline-offset-4\"\n                        >\n                            Rainbow Button\n                        </a>{' '}\n                        and{' '}\n                        <a\n                            href=\"https://magicui.design/docs/components/particles\"\n                            className=\"underline underline-offset-4\"\n                        >\n                            Particles\n                        </a>{' '}\n                        sourced from{' '}\n                        <a\n                            href=\"https://magicui.design\"\n                            className=\"underline underline-offset-4\"\n                        >\n                            Magic UI\n                        </a>\n                        .\n                    </m.p>\n                    <m.div\n                        animate={{ transform: 'translateY(0)', opacity: 1 }}\n                        initial={{ transform: 'translateY(-20px)', opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0.3,\n                            ease: 'easeOut',\n                        }}\n                    >\n                        <a\n                            href=\"#\"\n                            className={cn(\n                                rainbowButtonVariants({\n                                    size: 'lg',\n                                    className:\n                                        'mt-6 h-12 w-fit min-w-3xs gap-1 text-base',\n                                })\n                            )}\n                        >\n                            <span className=\"font-semibold\">Sign-up now</span>\n                            <span className=\"font-light italic\">\n                                â€” it's free\n                            </span>\n                        </a>\n                    </m.div>\n                </div>\n\n                <div className=\"relative mt-24 flex w-full max-w-7xl\">\n                    <m.div\n                        animate={{ transform: 'translateY(0)', opacity: 1 }}\n                        initial={{ transform: 'translateY(20px)', opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0.5,\n                            ease: 'easeOut',\n                        }}\n                        className=\"bg-accent dark:bg-accent/40 ring-border z-10 aspect-video w-full rounded-2xl p-1 ring-1 ring-inset md:p-2\"\n                    >\n                        <div className=\"relative w-full overflow-hidden rounded-xl\">\n                            <img\n                                src=\"https://launchmvpfast.com/landing.png\"\n                                alt=\"\"\n                                className=\"bg-muted aspect-video w-full object-cover\"\n                                width={1920}\n                                height={1080}\n                            />\n                        </div>\n                    </m.div>\n                    <div className=\"from-background via-background pointer-events-none absolute right-0 bottom-0 left-0 z-40 h-[60%] bg-gradient-to-t to-transparent\" />\n                    <m.div\n                        animate={{ opacity: 1 }}\n                        initial={{ opacity: 0 }}\n                        transition={{\n                            duration: 0.6,\n                            delay: 0.8,\n                            ease: 'easeOut',\n                        }}\n                        className=\"absolute top-0 z-0 h-5 w-full rounded-xl bg-blue-400 blur-[20px] sm:h-10 md:h-20 md:blur-[100px] dark:bg-blue-200 dark:blur-[40px] sm:dark:top-10 md:dark:blur-[100px]\"\n                    />\n                </div>\n\n                <Particles\n                    className=\"absolute inset-0 z-0 h-[80%]\"\n                    quantity={150}\n                    ease={80}\n                    refresh\n                    accordingToTheme={true}\n                />\n            </section>\n        </LazyMotion>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/hero.tsx"
    },
    {
      "path": "components/ui/particles.tsx",
      "content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { useTheme } from 'next-themes'\nimport React, {\n    ComponentPropsWithoutRef,\n    useEffect,\n    useRef,\n    useState,\n} from 'react'\n\ninterface MousePosition {\n    x: number\n    y: number\n}\n\nfunction MousePosition(): MousePosition {\n    const [mousePosition, setMousePosition] = useState<MousePosition>({\n        x: 0,\n        y: 0,\n    })\n\n    useEffect(() => {\n        const handleMouseMove = (event: MouseEvent) => {\n            setMousePosition({ x: event.clientX, y: event.clientY })\n        }\n\n        window.addEventListener('mousemove', handleMouseMove)\n\n        return () => {\n            window.removeEventListener('mousemove', handleMouseMove)\n        }\n    }, [])\n\n    return mousePosition\n}\n\ninterface ParticlesProps extends ComponentPropsWithoutRef<'div'> {\n    className?: string\n    quantity?: number\n    staticity?: number\n    ease?: number\n    size?: number\n    refresh?: boolean\n    color?: string\n    vx?: number\n    vy?: number\n    accordingToTheme?: boolean\n}\n\nfunction hexToRgb(hex: string): number[] {\n    hex = hex.replace('#', '')\n\n    if (hex.length === 3) {\n        hex = hex\n            .split('')\n            .map((char) => char + char)\n            .join('')\n    }\n\n    const hexInt = parseInt(hex, 16)\n    const red = (hexInt >> 16) & 255\n    const green = (hexInt >> 8) & 255\n    const blue = hexInt & 255\n    return [red, green, blue]\n}\n\ntype Circle = {\n    x: number\n    y: number\n    translateX: number\n    translateY: number\n    size: number\n    alpha: number\n    targetAlpha: number\n    dx: number\n    dy: number\n    magnetism: number\n}\n\nexport const Particles: React.FC<ParticlesProps> = ({\n    className = '',\n    quantity = 100,\n    staticity = 50,\n    ease = 50,\n    size = 0.4,\n    refresh = false,\n    color = '#ffffff',\n    accordingToTheme = false,\n    vx = 0,\n    vy = 0,\n    ...props\n}) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const canvasContainerRef = useRef<HTMLDivElement>(null)\n    const context = useRef<CanvasRenderingContext2D | null>(null)\n    const circles = useRef<Circle[]>([])\n    const mousePosition = MousePosition()\n    const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 })\n    const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 })\n    const dpr = typeof window !== 'undefined' ? window.devicePixelRatio : 1\n    const rafID = useRef<number | null>(null)\n    const resizeTimeout = useRef<NodeJS.Timeout | null>(null)\n\n    const { resolvedTheme } = useTheme()\n    const [c, setC] = useState(color)\n\n    useEffect(() => {\n        setC(resolvedTheme === 'dark' ? '#ffffff' : '#000000')\n    }, [resolvedTheme])\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            context.current = canvasRef.current.getContext('2d')\n        }\n        initCanvas()\n        animate()\n\n        const handleResize = () => {\n            if (resizeTimeout.current) {\n                clearTimeout(resizeTimeout.current)\n            }\n            resizeTimeout.current = setTimeout(() => {\n                initCanvas()\n            }, 200)\n        }\n\n        window.addEventListener('resize', handleResize)\n\n        return () => {\n            if (rafID.current != null) {\n                window.cancelAnimationFrame(rafID.current)\n            }\n            if (resizeTimeout.current) {\n                clearTimeout(resizeTimeout.current)\n            }\n            window.removeEventListener('resize', handleResize)\n        }\n    }, [color, c])\n\n    useEffect(() => {\n        onMouseMove()\n    }, [mousePosition.x, mousePosition.y])\n\n    useEffect(() => {\n        initCanvas()\n    }, [refresh])\n\n    const initCanvas = () => {\n        resizeCanvas()\n        drawParticles()\n    }\n\n    const onMouseMove = () => {\n        if (canvasRef.current) {\n            const rect = canvasRef.current.getBoundingClientRect()\n            const { w, h } = canvasSize.current\n            const x = mousePosition.x - rect.left - w / 2\n            const y = mousePosition.y - rect.top - h / 2\n            const inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2\n            if (inside) {\n                mouse.current.x = x\n                mouse.current.y = y\n            }\n        }\n    }\n\n    const resizeCanvas = () => {\n        if (\n            canvasContainerRef.current &&\n            canvasRef.current &&\n            context.current\n        ) {\n            canvasSize.current.w = canvasContainerRef.current.offsetWidth\n            canvasSize.current.h = canvasContainerRef.current.offsetHeight\n\n            canvasRef.current.width = canvasSize.current.w * dpr\n            canvasRef.current.height = canvasSize.current.h * dpr\n            canvasRef.current.style.width = `${canvasSize.current.w}px`\n            canvasRef.current.style.height = `${canvasSize.current.h}px`\n            context.current.scale(dpr, dpr)\n\n            // Clear existing particles and create new ones with exact quantity\n            circles.current = []\n            for (let i = 0; i < quantity; i++) {\n                const circle = circleParams()\n                drawCircle(circle)\n            }\n        }\n    }\n\n    const circleParams = (): Circle => {\n        const x = Math.floor(Math.random() * canvasSize.current.w)\n        const y = Math.floor(Math.random() * canvasSize.current.h)\n        const translateX = 0\n        const translateY = 0\n        const pSize = Math.floor(Math.random() * 2) + size\n        const alpha = 0\n        const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1))\n        const dx = (Math.random() - 0.5) * 0.1\n        const dy = (Math.random() - 0.5) * 0.1\n        const magnetism = 0.1 + Math.random() * 4\n        return {\n            x,\n            y,\n            translateX,\n            translateY,\n            size: pSize,\n            alpha,\n            targetAlpha,\n            dx,\n            dy,\n            magnetism,\n        }\n    }\n\n    const rgb = hexToRgb(accordingToTheme ? c : color)\n\n    const drawCircle = (circle: Circle, update = false) => {\n        if (context.current) {\n            const { x, y, translateX, translateY, size, alpha } = circle\n            context.current.translate(translateX, translateY)\n            context.current.beginPath()\n            context.current.arc(x, y, size, 0, 2 * Math.PI)\n            context.current.fillStyle = `rgba(${rgb.join(', ')}, ${alpha})`\n            context.current.fill()\n            context.current.setTransform(dpr, 0, 0, dpr, 0, 0)\n\n            if (!update) {\n                circles.current.push(circle)\n            }\n        }\n    }\n\n    const clearContext = () => {\n        if (context.current) {\n            context.current.clearRect(\n                0,\n                0,\n                canvasSize.current.w,\n                canvasSize.current.h\n            )\n        }\n    }\n\n    const drawParticles = () => {\n        clearContext()\n        const particleCount = quantity\n        for (let i = 0; i < particleCount; i++) {\n            const circle = circleParams()\n            drawCircle(circle)\n        }\n    }\n\n    const remapValue = (\n        value: number,\n        start1: number,\n        end1: number,\n        start2: number,\n        end2: number\n    ): number => {\n        const remapped =\n            ((value - start1) * (end2 - start2)) / (end1 - start1) + start2\n        return remapped > 0 ? remapped : 0\n    }\n\n    const animate = () => {\n        clearContext()\n        circles.current.forEach((circle: Circle, i: number) => {\n            // Handle the alpha value\n            const edge = [\n                circle.x + circle.translateX - circle.size, // distance from left edge\n                canvasSize.current.w -\n                    circle.x -\n                    circle.translateX -\n                    circle.size, // distance from right edge\n                circle.y + circle.translateY - circle.size, // distance from top edge\n                canvasSize.current.h -\n                    circle.y -\n                    circle.translateY -\n                    circle.size, // distance from bottom edge\n            ]\n            const closestEdge = edge.reduce((a, b) => Math.min(a, b))\n            const remapClosestEdge = parseFloat(\n                remapValue(closestEdge, 0, 20, 0, 1).toFixed(2)\n            )\n            if (remapClosestEdge > 1) {\n                circle.alpha += 0.02\n                if (circle.alpha > circle.targetAlpha) {\n                    circle.alpha = circle.targetAlpha\n                }\n            } else {\n                circle.alpha = circle.targetAlpha * remapClosestEdge\n            }\n            circle.x += circle.dx + vx\n            circle.y += circle.dy + vy\n            circle.translateX +=\n                (mouse.current.x / (staticity / circle.magnetism) -\n                    circle.translateX) /\n                ease\n            circle.translateY +=\n                (mouse.current.y / (staticity / circle.magnetism) -\n                    circle.translateY) /\n                ease\n\n            drawCircle(circle, true)\n\n            // circle gets out of the canvas\n            if (\n                circle.x < -circle.size ||\n                circle.x > canvasSize.current.w + circle.size ||\n                circle.y < -circle.size ||\n                circle.y > canvasSize.current.h + circle.size\n            ) {\n                // remove the circle from the array\n                circles.current.splice(i, 1)\n                // create a new circle\n                const newCircle = circleParams()\n                drawCircle(newCircle)\n            }\n        })\n        rafID.current = window.requestAnimationFrame(animate)\n    }\n\n    return (\n        <div\n            className={cn('pointer-events-none', className)}\n            ref={canvasContainerRef}\n            aria-hidden=\"true\"\n            {...props}\n        >\n            <canvas ref={canvasRef} className=\"size-full\" />\n        </div>\n    )\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/rainbow-button.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport React from 'react'\n\nconst rainbowButtonVariants = cva(\n    cn(\n        'relative cursor-pointer group transition-all animate-rainbow',\n        'inline-flex items-center justify-center gap-2 shrink-0',\n        'rounded-sm outline-none focus-visible:ring-[3px] aria-invalid:border-destructive',\n        'text-sm font-medium whitespace-nowrap',\n        'disabled:pointer-events-none disabled:opacity-50',\n        \"[&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0\"\n    ),\n    {\n        variants: {\n            variant: {\n                default:\n                    'border-0 bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.125rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] before:[filter:blur(0.75rem)] dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))]',\n                outline:\n                    'border border-input border-b-transparent bg-[linear-gradient(#ffffff,#ffffff),linear-gradient(#ffffff_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] bg-[length:200%] text-accent-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))] before:[filter:blur(0.75rem)] dark:bg-[linear-gradient(#0a0a0a,#0a0a0a),linear-gradient(#0a0a0a_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,var(--color-1),var(--color-5),var(--color-3),var(--color-4),var(--color-2))]',\n            },\n            size: {\n                default: 'h-9 px-4 py-2',\n                sm: 'h-8 rounded-lg px-3 text-xs',\n                lg: 'h-11 rounded-lg px-8',\n                icon: 'size-9',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n            size: 'default',\n        },\n    }\n)\n\ninterface RainbowButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof rainbowButtonVariants> {\n    asChild?: boolean\n}\n\nconst RainbowButton = React.forwardRef<HTMLButtonElement, RainbowButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : 'button'\n        return (\n            <Comp\n                data-slot=\"button\"\n                className={cn(\n                    rainbowButtonVariants({ variant, size, className })\n                )}\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\n\nRainbowButton.displayName = 'RainbowButton'\n\nexport { RainbowButton, rainbowButtonVariants, type RainbowButtonProps }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "cssVars": {
    "theme": {
      "animate-rainbow": "rainbow var(--speed, 2s) infinite linear"
    },
    "light": {
      "--color-1": "oklch(66.2% 0.225 25.9)",
      "--color-2": "oklch(60.4% 0.26 302)",
      "--color-3": "oklch(69.6% 0.165 251)",
      "--color-4": "oklch(80.2% 0.134 225)",
      "--color-5": "oklch(90.7% 0.231 133)"
    },
    "dark": {
      "--color-1": "oklch(66.2% 0.225 25.9)",
      "--color-2": "oklch(60.4% 0.26 302)",
      "--color-3": "oklch(69.6% 0.165 251)",
      "--color-4": "oklch(80.2% 0.134 225)",
      "--color-5": "oklch(90.7% 0.231 133)"
    }
  },
  "css": {
    "@keyframes rainbow": {
      "0%": {
        "background-position": "0%"
      },
      "100%": {
        "background-position": "100%"
      }
    }
  }
}