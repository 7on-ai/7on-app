{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-with-loading-dropdown",
  "type": "registry:component",
  "title": "Action with Loading Dropdown",
  "description": "A dropdown menu for actions with loading state",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@tanstack/react-query"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/action-with-loading-dropdown.tsx",
      "content": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { useMutation } from '@tanstack/react-query'\nimport {\n    EllipsisIcon,\n    Loader2Icon,\n    LockIcon,\n    ScanSearchIcon,\n    SquarePenIcon,\n    Trash2Icon,\n} from 'lucide-react'\nimport React, { Dispatch, JSX, SetStateAction } from 'react'\n\ntype ActionDropdownProps = {\n    align?: 'start' | 'end' | 'center'\n    side?: 'top' | 'right' | 'bottom' | 'left'\n}\n\ntype ComponentProps = {\n    open: boolean\n    setOpen: Dispatch<SetStateAction<boolean>>\n}\n\ntype Item = {\n    id: string\n    subItems: {\n        id: string\n        icon: React.ReactNode\n        variant?: 'destructive' | 'default'\n        Component: ({ open, setOpen }: ComponentProps) => JSX.Element\n    }[]\n}\n\nconst items: Item[] = [\n    {\n        id: 'general',\n        subItems: [\n            {\n                id: 'edit',\n                icon: <SquarePenIcon />,\n                Component: EditItem,\n            },\n            {\n                id: 'view',\n                icon: <ScanSearchIcon />,\n                Component: ViewItem,\n            },\n            {\n                id: 'block',\n                icon: <LockIcon />,\n                Component: BlockItem,\n            },\n        ],\n    },\n    {\n        id: 'destructive',\n        subItems: [\n            {\n                id: 'delete',\n                icon: <Trash2Icon />,\n                Component: DeleteItem,\n                variant: 'destructive',\n            },\n        ],\n    },\n]\n\nexport default function ActionWithLoadingDropdown({\n    align = 'end',\n    side = 'bottom',\n}: ActionDropdownProps) {\n    const [open, setOpen] = React.useState(false)\n\n    return (\n        <DropdownMenu open={open} onOpenChange={setOpen}>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"cursor-pointer\">\n                    <span>Actions with loading</span>\n                    <EllipsisIcon />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent\n                align={align}\n                side={side}\n                className=\"w-[200px]\"\n            >\n                <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {items.map((item, index) => (\n                    <DropdownMenuGroup key={item.id}>\n                        {item.subItems.map(({ Component, id }) => (\n                            <Component open={open} setOpen={setOpen} key={id} />\n                        ))}\n                        {index < items.length - 1 && <DropdownMenuSeparator />}\n                    </DropdownMenuGroup>\n                ))}\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n\nfunction EditItem({ setOpen }: ComponentProps) {\n    const { isPending, mutate } = useMutation({\n        mutationFn: async () => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve('Edit')\n                }, 1000)\n            })\n        },\n        onSuccess: () => {\n            console.log(`Mutation successful: Edit`)\n        },\n        onError: () => {\n            console.log(`Mutation failed: Edit`)\n        },\n        onSettled: () => {\n            setOpen(false)\n        },\n    })\n\n    return (\n        <DropdownMenuItem\n            onSelect={(e) => {\n                e.preventDefault()\n                console.log('Edit clicked')\n                mutate()\n            }}\n            disabled={isPending}\n        >\n            {isPending ? (\n                <Loader2Icon className=\"animate-spin\" />\n            ) : (\n                <SquarePenIcon />\n            )}\n            <span className=\"flex-1\">Edit</span>\n            <DropdownMenuShortcut>E</DropdownMenuShortcut>\n        </DropdownMenuItem>\n    )\n}\n\nfunction ViewItem({ setOpen }: ComponentProps) {\n    const { isPending, mutate } = useMutation({\n        mutationFn: async () => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve('View')\n                }, 1000)\n            })\n        },\n        onSuccess: () => {\n            console.log(`Mutation successful: View`)\n        },\n        onError: () => {\n            console.log(`Mutation failed: View`)\n        },\n        onSettled: () => {\n            setOpen(false)\n        },\n    })\n\n    return (\n        <DropdownMenuItem\n            onSelect={(e) => {\n                e.preventDefault()\n                console.log('View clicked')\n                mutate()\n            }}\n            disabled={isPending}\n        >\n            {isPending ? (\n                <Loader2Icon className=\"animate-spin\" />\n            ) : (\n                <ScanSearchIcon />\n            )}\n            <span className=\"flex-1\">View</span>\n            <DropdownMenuShortcut>V</DropdownMenuShortcut>\n        </DropdownMenuItem>\n    )\n}\n\nfunction BlockItem({ setOpen }: ComponentProps) {\n    const { isPending, mutate } = useMutation({\n        mutationFn: async () => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve('Block')\n                }, 1000)\n            })\n        },\n        onSuccess: () => {\n            console.log(`Mutation successful: Block`)\n        },\n        onError: () => {\n            console.log(`Mutation failed: Block`)\n        },\n        onSettled: () => {\n            setOpen(false)\n        },\n    })\n\n    return (\n        <DropdownMenuItem\n            onSelect={(e) => {\n                e.preventDefault()\n                console.log('Block clicked')\n                mutate()\n            }}\n            disabled={isPending}\n        >\n            {isPending ? (\n                <Loader2Icon className=\"animate-spin\" />\n            ) : (\n                <LockIcon />\n            )}\n            <span className=\"flex-1\">Block</span>\n            <DropdownMenuShortcut>B</DropdownMenuShortcut>\n        </DropdownMenuItem>\n    )\n}\n\nfunction DeleteItem({ setOpen }: ComponentProps) {\n    const { isPending, mutate } = useMutation({\n        mutationFn: async () => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve('Delete')\n                }, 1000)\n            })\n        },\n        onSuccess: () => {\n            console.log(`Mutation successful: Delete`)\n        },\n        onError: () => {\n            console.log(`Mutation failed: Delete`)\n        },\n        onSettled: () => {\n            setOpen(false)\n        },\n    })\n\n    return (\n        <DropdownMenuItem\n            onSelect={(e) => {\n                e.preventDefault()\n                console.log('Delete clicked')\n                mutate()\n            }}\n            variant=\"destructive\"\n            disabled={isPending}\n        >\n            {isPending ? (\n                <Loader2Icon className=\"animate-spin\" />\n            ) : (\n                <Trash2Icon />\n            )}\n            <span className=\"flex-1\">Delete</span>\n            <DropdownMenuShortcut className=\"text-destructive\">\n                D\n            </DropdownMenuShortcut>\n        </DropdownMenuItem>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/action-with-loading-dropdown.tsx"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n    {\n        variants: {\n            variant: {\n                default:\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n                destructive:\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n                outline:\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n                secondary:\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n                ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n                link: 'text-primary underline-offset-4 hover:underline',\n            },\n            size: {\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n                icon: 'size-9',\n                iconSm: 'size-8',\n                iconXsm: 'size-5',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n            size: 'default',\n        },\n    }\n)\n\nfunction Button({\n    className,\n    variant,\n    size,\n    asChild = false,\n    ...props\n}: React.ComponentProps<'button'> &\n    VariantProps<typeof buttonVariants> & {\n        asChild?: boolean\n    }) {\n    const Comp = asChild ? Slot : 'button'\n\n    return (\n        <Comp\n            data-slot=\"button\"\n            className={cn(buttonVariants({ variant, size, className }))}\n            {...props}\n        />\n    )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n    return (\n        <DropdownMenuPrimitive.Portal\n            data-slot=\"dropdown-menu-portal\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuTrigger({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n    return (\n        <DropdownMenuPrimitive.Trigger\n            data-slot=\"dropdown-menu-trigger\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuContent({\n    className,\n    sideOffset = 4,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n    return (\n        <DropdownMenuPrimitive.Portal>\n            <DropdownMenuPrimitive.Content\n                data-slot=\"dropdown-menu-content\"\n                sideOffset={sideOffset}\n                className={cn(\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n                    className\n                )}\n                {...props}\n            />\n        </DropdownMenuPrimitive.Portal>\n    )\n}\n\nfunction DropdownMenuGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n    return (\n        <DropdownMenuPrimitive.Group\n            data-slot=\"dropdown-menu-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuItem({\n    className,\n    inset,\n    variant = 'default',\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n    variant?: 'default' | 'destructive'\n}) {\n    return (\n        <DropdownMenuPrimitive.Item\n            data-slot=\"dropdown-menu-item\"\n            data-inset={inset}\n            data-variant={variant}\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuCheckboxItem({\n    className,\n    children,\n    checked,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n    return (\n        <DropdownMenuPrimitive.CheckboxItem\n            data-slot=\"dropdown-menu-checkbox-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            checked={checked}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CheckIcon className=\"size-4\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.CheckboxItem>\n    )\n}\n\nfunction DropdownMenuRadioGroup({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n    return (\n        <DropdownMenuPrimitive.RadioGroup\n            data-slot=\"dropdown-menu-radio-group\"\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuRadioItem({\n    className,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n    return (\n        <DropdownMenuPrimitive.RadioItem\n            data-slot=\"dropdown-menu-radio-item\"\n            className={cn(\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n                className\n            )}\n            {...props}\n        >\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n                <DropdownMenuPrimitive.ItemIndicator>\n                    <CircleIcon className=\"size-2 fill-current\" />\n                </DropdownMenuPrimitive.ItemIndicator>\n            </span>\n            {children}\n        </DropdownMenuPrimitive.RadioItem>\n    )\n}\n\nfunction DropdownMenuLabel({\n    className,\n    inset,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.Label\n            data-slot=\"dropdown-menu-label\"\n            data-inset={inset}\n            className={cn(\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSeparator({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n    return (\n        <DropdownMenuPrimitive.Separator\n            data-slot=\"dropdown-menu-separator\"\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuShortcut({\n    className,\n    ...props\n}: React.ComponentProps<'span'>) {\n    return (\n        <span\n            data-slot=\"dropdown-menu-shortcut\"\n            className={cn(\n                'text-muted-foreground border-border tex ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs font-medium tracking-widest',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction DropdownMenuSub({\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n    return (\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n    )\n}\n\nfunction DropdownMenuSubTrigger({\n    className,\n    inset,\n    children,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n}) {\n    return (\n        <DropdownMenuPrimitive.SubTrigger\n            data-slot=\"dropdown-menu-sub-trigger\"\n            data-inset={inset}\n            className={cn(\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n                className\n            )}\n            {...props}\n        >\n            {children}\n            <ChevronRightIcon className=\"ml-auto size-4\" />\n        </DropdownMenuPrimitive.SubTrigger>\n    )\n}\n\nfunction DropdownMenuSubContent({\n    className,\n    ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n    return (\n        <DropdownMenuPrimitive.SubContent\n            data-slot=\"dropdown-menu-sub-content\"\n            className={cn(\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport {\n    DropdownMenu,\n    DropdownMenuPortal,\n    DropdownMenuTrigger,\n    DropdownMenuContent,\n    DropdownMenuGroup,\n    DropdownMenuLabel,\n    DropdownMenuItem,\n    DropdownMenuCheckboxItem,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuShortcut,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}