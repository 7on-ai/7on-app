{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-with-numbers-only",
  "type": "registry:component",
  "title": "OTP with Numbers Only",
  "description": "A component for inputting OTP codes with numbers only",
  "dependencies": [
    "input-otp",
    "lucide-react",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "path": "src/registry/default/components/input/otp-with-numbers-only.tsx",
      "content": "'use client'\n\nimport {\n    InputOTP,\n    InputOTPGroup,\n    InputOTPSlot,\n} from '@/components/ui/input-otp'\nimport { Label } from '@/components/ui/label'\n\n// Change the inputLength to the desired number of slots\nconst inputLength = 6\n\nexport default function OtpWithNumbersOnly() {\n    return (\n        <div className=\"flex w-full max-w-4/5 flex-col gap-2\">\n            <Label>OTP with numbers only</Label>\n\n            <InputOTP\n                maxLength={inputLength}\n                inputMode=\"numeric\"\n                onChange={(e) => {\n                    //if value is not a number, return\n                    if (isNaN(Number(e))) {\n                        return\n                    }\n                }}\n            >\n                <InputOTPGroup>\n                    {Array.from({ length: inputLength }, (_, index) => (\n                        <InputOTPSlot key={index} index={index} />\n                    ))}\n                </InputOTPGroup>\n            </InputOTP>\n\n            <p className=\"text-muted-foreground text-sm\">\n                Built with{' '}\n                <a\n                    target=\"_blank\"\n                    href=\"https://input-otp.rodz.dev/\"\n                    className=\"underline underline-offset-3\"\n                >\n                    input-otp\n                </a>{' '}\n            </p>\n        </div>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/otp-with-numbers-only.tsx"
    },
    {
      "path": "src/components/ui/input-otp.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n    className,\n    containerClassName,\n    ...props\n}: React.ComponentProps<typeof OTPInput> & {\n    containerClassName?: string\n}) {\n    return (\n        <OTPInput\n            data-slot=\"input-otp\"\n            containerClassName={cn(\n                'flex items-center gap-2 has-disabled:opacity-50',\n                containerClassName\n            )}\n            className={cn('disabled:cursor-not-allowed', className)}\n            {...props}\n        />\n    )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n    return (\n        <div\n            data-slot=\"input-otp-group\"\n            className={cn('flex items-center', className)}\n            {...props}\n        />\n    )\n}\n\nfunction InputOTPSlot({\n    index,\n    className,\n    ...props\n}: React.ComponentProps<'div'> & {\n    index: number\n}) {\n    const inputOTPContext = React.useContext(OTPInputContext)\n    const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n    return (\n        <div\n            data-slot=\"input-otp-slot\"\n            data-active={isActive}\n            className={cn(\n                'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n                    <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n                </div>\n            )}\n        </div>\n    )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n    return (\n        <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n            <MinusIcon />\n        </div>\n    )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}