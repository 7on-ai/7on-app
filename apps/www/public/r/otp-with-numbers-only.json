{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-with-numbers-only",
  "type": "registry:component",
  "title": "OTP with Numbers Only",
  "description": "A component for inputting OTP codes with numbers only",
  "dependencies": [
    "zod",
    "react-hook-form",
    "@hookform/resolvers",
    "react-hook-form",
    "zod",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "clsx",
    "tailwind-merge",
    "input-otp",
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/registry/default/components/input/otp-with-numbers-only.tsx",
      "content": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\nimport {\n    Form,\n    FormControl,\n    FormDescription,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from '@/components/ui/form'\nimport {\n    InputOTP,\n    InputOTPGroup,\n    InputOTPSlot,\n} from '@/components/ui/input-otp'\n\n// Change the inputLength to the desired number of slots\nconst inputLength = 6\n\nconst FormSchema = z.object({\n    pin: z.string().min(inputLength, {\n        message: `Your one-time password must be ${inputLength} characters.`,\n    }),\n})\n\nexport default function OtpWithNumbersOnly() {\n    const form = useForm<z.infer<typeof FormSchema>>({\n        resolver: zodResolver(FormSchema),\n        defaultValues: {\n            pin: '',\n        },\n    })\n\n    function onSubmit(data: z.infer<typeof FormSchema>) {\n        console.log('Form submitted:', data)\n        // Handle form submission logic here\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"flex max-w-4/5 justify-center space-y-6\"\n            >\n                <FormField\n                    control={form.control}\n                    name=\"pin\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>OTP with numbers only</FormLabel>\n                            <FormControl>\n                                <InputOTP\n                                    maxLength={inputLength}\n                                    inputMode=\"numeric\"\n                                    {...field}\n                                    onChange={(e) => {\n                                        //if value is not a number, return\n                                        if (isNaN(Number(e))) {\n                                            return\n                                        }\n\n                                        field.onChange(e)\n                                        field.onBlur()\n                                    }}\n                                >\n                                    <InputOTPGroup>\n                                        {Array.from(\n                                            { length: inputLength },\n                                            (_, index) => (\n                                                <InputOTPSlot\n                                                    key={index}\n                                                    index={index}\n                                                />\n                                            )\n                                        )}\n                                    </InputOTPGroup>\n                                </InputOTP>\n                            </FormControl>\n\n                            <FormDescription>\n                                Built with{' '}\n                                <a\n                                    target=\"_blank\"\n                                    href=\"https://input-otp.rodz.dev/\"\n                                    className=\"underline underline-offset-2\"\n                                >\n                                    input-otp\n                                </a>{' '}\n                                and{' '}\n                                <a\n                                    target=\"_blank\"\n                                    href=\"https://react-hook-form.com/\"\n                                    className=\"underline underline-offset-2\"\n                                >\n                                    react-hook-form\n                                </a>\n                            </FormDescription>\n\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/otp-with-numbers-only.tsx"
    },
    {
      "path": "src/components/ui/form.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n    Controller,\n    FormProvider,\n    useFormContext,\n    useFormState,\n    type ControllerProps,\n    type FieldPath,\n    type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n    name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n    {} as FormFieldContextValue\n)\n\nconst FormField = <\n    TFieldValues extends FieldValues = FieldValues,\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n    ...props\n}: ControllerProps<TFieldValues, TName>) => {\n    return (\n        <FormFieldContext.Provider value={{ name: props.name }}>\n            <Controller {...props} />\n        </FormFieldContext.Provider>\n    )\n}\n\nconst useFormField = () => {\n    const fieldContext = React.useContext(FormFieldContext)\n    const itemContext = React.useContext(FormItemContext)\n    const { getFieldState } = useFormContext()\n    const formState = useFormState({ name: fieldContext.name })\n    const fieldState = getFieldState(fieldContext.name, formState)\n\n    if (!fieldContext) {\n        throw new Error('useFormField should be used within <FormField>')\n    }\n\n    const { id } = itemContext\n\n    return {\n        id,\n        name: fieldContext.name,\n        formItemId: `${id}-form-item`,\n        formDescriptionId: `${id}-form-item-description`,\n        formMessageId: `${id}-form-item-message`,\n        ...fieldState,\n    }\n}\n\ntype FormItemContextValue = {\n    id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n    {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n    const id = React.useId()\n\n    return (\n        <FormItemContext.Provider value={{ id }}>\n            <div\n                data-slot=\"form-item\"\n                className={cn('grid gap-2', className)}\n                {...props}\n            />\n        </FormItemContext.Provider>\n    )\n}\n\nfunction FormLabel({\n    className,\n    ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n    const { error, formItemId } = useFormField()\n\n    return (\n        <Label\n            data-slot=\"form-label\"\n            data-error={!!error}\n            className={cn('data-[error=true]:text-destructive', className)}\n            htmlFor={formItemId}\n            {...props}\n        />\n    )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n    const { error, formItemId, formDescriptionId, formMessageId } =\n        useFormField()\n\n    return (\n        <Slot\n            data-slot=\"form-control\"\n            id={formItemId}\n            aria-describedby={\n                !error\n                    ? `${formDescriptionId}`\n                    : `${formDescriptionId} ${formMessageId}`\n            }\n            aria-invalid={!!error}\n            {...props}\n        />\n    )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n    const { formDescriptionId } = useFormField()\n\n    return (\n        <p\n            data-slot=\"form-description\"\n            id={formDescriptionId}\n            className={cn('text-muted-foreground text-sm', className)}\n            {...props}\n        />\n    )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n    const { error, formMessageId } = useFormField()\n    const body = error ? String(error?.message ?? '') : props.children\n\n    if (!body) {\n        return null\n    }\n\n    return (\n        <p\n            data-slot=\"form-message\"\n            className={cn('text-destructive text-sm', className)}\n            {...props}\n        >\n            {body}\n        </p>\n    )\n}\n\nexport {\n    useFormField,\n    Form,\n    FormItem,\n    FormLabel,\n    FormControl,\n    FormDescription,\n    FormMessage,\n    FormField,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/input-otp.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n    className,\n    containerClassName,\n    ...props\n}: React.ComponentProps<typeof OTPInput> & {\n    containerClassName?: string\n}) {\n    return (\n        <OTPInput\n            data-slot=\"input-otp\"\n            containerClassName={cn(\n                'flex items-center gap-2 has-disabled:opacity-50',\n                containerClassName\n            )}\n            className={cn('disabled:cursor-not-allowed', className)}\n            {...props}\n        />\n    )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n    return (\n        <div\n            data-slot=\"input-otp-group\"\n            className={cn('flex items-center', className)}\n            {...props}\n        />\n    )\n}\n\nfunction InputOTPSlot({\n    index,\n    className,\n    ...props\n}: React.ComponentProps<'div'> & {\n    index: number\n}) {\n    const inputOTPContext = React.useContext(OTPInputContext)\n    const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n    return (\n        <div\n            data-slot=\"input-otp-slot\"\n            data-active={isActive}\n            className={cn(\n                'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n                    <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n                </div>\n            )}\n        </div>\n    )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n    return (\n        <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n            <MinusIcon />\n        </div>\n    )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}